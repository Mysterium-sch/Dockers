// Generated by gencpp from file pose_graph/SvinHealth.msg
// DO NOT EDIT!


#ifndef POSE_GRAPH_MESSAGE_SVINHEALTH_H
#define POSE_GRAPH_MESSAGE_SVINHEALTH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point32.h>

namespace pose_graph
{
template <class ContainerAllocator>
struct SvinHealth_
{
  typedef SvinHealth_<ContainerAllocator> Type;

  SvinHealth_()
    : header()
    , isTrackingOk(false)
    , numTrackedKps(0)
    , newKps(0)
    , kpsPerQuadrant()
    , points3D()
    , covisibilities()
    , responseStrengths()
    , quality()  {
    }
  SvinHealth_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , isTrackingOk(false)
    , numTrackedKps(0)
    , newKps(0)
    , kpsPerQuadrant(_alloc)
    , points3D(_alloc)
    , covisibilities(_alloc)
    , responseStrengths(_alloc)
    , quality(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _isTrackingOk_type;
  _isTrackingOk_type isTrackingOk;

   typedef int32_t _numTrackedKps_type;
  _numTrackedKps_type numTrackedKps;

   typedef int32_t _newKps_type;
  _newKps_type newKps;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _kpsPerQuadrant_type;
  _kpsPerQuadrant_type kpsPerQuadrant;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point32_<ContainerAllocator> >> _points3D_type;
  _points3D_type points3D;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _covisibilities_type;
  _covisibilities_type covisibilities;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _responseStrengths_type;
  _responseStrengths_type responseStrengths;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _quality_type;
  _quality_type quality;





  typedef boost::shared_ptr< ::pose_graph::SvinHealth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_graph::SvinHealth_<ContainerAllocator> const> ConstPtr;

}; // struct SvinHealth_

typedef ::pose_graph::SvinHealth_<std::allocator<void> > SvinHealth;

typedef boost::shared_ptr< ::pose_graph::SvinHealth > SvinHealthPtr;
typedef boost::shared_ptr< ::pose_graph::SvinHealth const> SvinHealthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_graph::SvinHealth_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_graph::SvinHealth_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pose_graph::SvinHealth_<ContainerAllocator1> & lhs, const ::pose_graph::SvinHealth_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.isTrackingOk == rhs.isTrackingOk &&
    lhs.numTrackedKps == rhs.numTrackedKps &&
    lhs.newKps == rhs.newKps &&
    lhs.kpsPerQuadrant == rhs.kpsPerQuadrant &&
    lhs.points3D == rhs.points3D &&
    lhs.covisibilities == rhs.covisibilities &&
    lhs.responseStrengths == rhs.responseStrengths &&
    lhs.quality == rhs.quality;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pose_graph::SvinHealth_<ContainerAllocator1> & lhs, const ::pose_graph::SvinHealth_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pose_graph

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pose_graph::SvinHealth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_graph::SvinHealth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph::SvinHealth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph::SvinHealth_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph::SvinHealth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph::SvinHealth_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_graph::SvinHealth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a54e8cebbde6690d9e64fd8b54abc7c6";
  }

  static const char* value(const ::pose_graph::SvinHealth_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa54e8cebbde6690dULL;
  static const uint64_t static_value2 = 0x9e64fd8b54abc7c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_graph::SvinHealth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_graph/SvinHealth";
  }

  static const char* value(const ::pose_graph::SvinHealth_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_graph::SvinHealth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool isTrackingOk\n"
"int32 numTrackedKps\n"
"int32 newKps\n"
"int32[] kpsPerQuadrant\n"
"geometry_msgs/Point32[] points3D\n"
"int32[] covisibilities\n"
"float32[] responseStrengths\n"
"float32[] quality\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::pose_graph::SvinHealth_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_graph::SvinHealth_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.isTrackingOk);
      stream.next(m.numTrackedKps);
      stream.next(m.newKps);
      stream.next(m.kpsPerQuadrant);
      stream.next(m.points3D);
      stream.next(m.covisibilities);
      stream.next(m.responseStrengths);
      stream.next(m.quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SvinHealth_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_graph::SvinHealth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_graph::SvinHealth_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "isTrackingOk: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isTrackingOk);
    s << indent << "numTrackedKps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numTrackedKps);
    s << indent << "newKps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.newKps);
    s << indent << "kpsPerQuadrant[]" << std::endl;
    for (size_t i = 0; i < v.kpsPerQuadrant.size(); ++i)
    {
      s << indent << "  kpsPerQuadrant[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.kpsPerQuadrant[i]);
    }
    s << indent << "points3D[]" << std::endl;
    for (size_t i = 0; i < v.points3D.size(); ++i)
    {
      s << indent << "  points3D[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.points3D[i]);
    }
    s << indent << "covisibilities[]" << std::endl;
    for (size_t i = 0; i < v.covisibilities.size(); ++i)
    {
      s << indent << "  covisibilities[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.covisibilities[i]);
    }
    s << indent << "responseStrengths[]" << std::endl;
    for (size_t i = 0; i < v.responseStrengths.size(); ++i)
    {
      s << indent << "  responseStrengths[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.responseStrengths[i]);
    }
    s << indent << "quality[]" << std::endl;
    for (size_t i = 0; i < v.quality.size(); ++i)
    {
      s << indent << "  quality[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quality[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

