ARG CUDA="11.3.1"
ARG UBUNTU="20.04"
ARG OPENCV="4.5.2"
ARG ARCH=""

FROM thecanadianroot/opencv-cuda:ubuntu${UBUNTU}-cuda${CUDA}-opencv${OPENCV}${ARCH}

ENV DEBIAN_FRONTEND=noninteractive

## ROS CORE
# setup timezone
RUN echo 'Etc/UTC' > /etc/timezone; ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime; exit 0
RUN apt-get update && apt-get install -q -y --no-install-recommends tzdata

# install packages
RUN apt-get update && apt-get install -q -y --no-install-recommends dirmngr gnupg2

# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros1-latest.list

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

ENV ROS_DISTRO noetic

# install ros packages
RUN apt-get update && apt-get install -y --no-install-recommends ros-noetic-desktop-full

## ROS BASE
# install bootstrap tools
RUN apt-get update && apt-get install --no-install-recommends -y build-essential python3-rosdep python3-rosinstall python3-vcstools

# bootstrap rosdep
RUN rosdep init && rosdep update --rosdistro $ROS_DISTRO

# install ros packages
RUN apt-get update && apt-get install -y --no-install-recommends ros-noetic-ros-base=1.5.0-1*

## ROS PERCEPTION
# install ros packages
RUN apt-get update && apt-get install -y --no-install-recommends ros-noetic-perception=1.5.0-1*

RUN apt remove -y ros-noetic-vision-opencv
RUN apt -y install ros-noetic-cv-bridge

RUN rm -rf /var/lib/apt/lists/*

RUN apt-get update -y &&\
	apt-get install -y \
	cmake \
	git \
	wget \
	zip \
	unzip \
    vim \
	curl \
	dpkg \
	gnupg \
	ssh \
	python3-pip \
	python3-opencv \
	gedit

RUN apt-get install -y --allow-unauthenticated \ 
	ros-noetic-catkin \
	python3-catkin-tools \
	libsuitesparse-dev
	
RUN apt install -y ros-noetic-pcl-ros &&\
	apt install -y pcl-tools

RUN apt-get install -y freeglut3-dev libglew-dev

RUN apt install -y libgoogle-glog-dev libatlas-base-dev libeigen3-dev \
    libatlas-base-dev libsuitesparse-dev \
    libboost-dev libboost-filesystem-dev libboost-all-dev libceres-dev

RUN rosdep update

# OpenCV Version
ARG OPENCV_VERSION="4.8.0"

# Install build dependencies
RUN apt-get clean && \
    apt-get update && \
    apt-get install -y --no-install-recommends --fix-missing \
        build-essential binutils \
        ca-certificates cmake cmake-qt-gui curl \
        dbus-x11 \
        ffmpeg \
        gdb gcc g++ gfortran git \
        tar \
        lsb-release \
        procps \
        manpages-dev \
        unzip \
        zip \
        wget \
        xauth \
        swig \
        python3-pip python3-dev python3-numpy python3-distutils \
        python3-setuptools python3-pyqt5 python3-opencv \
        libboost-python-dev libboost-thread-dev libatlas-base-dev libavcodec-dev \
        libavformat-dev libavutil-dev libcanberra-gtk3-module libeigen3-dev \
        libglew-dev libgl1-mesa-dev libgl1-mesa-glx libglib2.0-0 libgtk2.0-dev \
        libgtk-3-dev libjpeg-dev libjpeg8-dev libjpeg-turbo8-dev liblapack-dev \
        liblapacke-dev libopenblas-dev libpng-dev libpostproc-dev \
        libpq-dev libsm6 libswscale-dev libtbb-dev libtbb2 libtesseract-dev \
        libtiff-dev libtiff5-dev libv4l-dev libx11-dev libxext6 libxine2-dev \
        libxrender-dev libxvidcore-dev libx264-dev libgtkglext1 libgtkglext1-dev \
        libgstreamer-plugins-base1.0-dev \
        libgstreamer1.0-dev libopenexr-dev \
        openexr \
        pkg-config \
        qv4l2 \
        v4l-utils \
        zlib1g-dev \
        locales \
        && locale-gen en_US.UTF-8 \
        && LC_ALL=en_US.UTF-8 \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean
WORKDIR /opencv
RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \
    && wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \
    && unzip opencv.zip \
    && unzip opencv_contrib.zip \
    && mv opencv-${OPENCV_VERSION} opencv \
    && mv opencv_contrib-${OPENCV_VERSION} opencv_contrib
RUN mkdir /opencv/opencv/build
WORKDIR /opencv/opencv/build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
 -D CMAKE_INSTALL_PREFIX=/usr/local \
 -D INSTALL_PYTHON_EXAMPLES=ON \
 -D INSTALL_C_EXAMPLES=ON \
 -D OPENCV_ENABLE_NONFREE=ON \
 -D OPENCV_GENERATE_PKGCONFIG=ON \
 -D OPENCV_EXTRA_MODULES_PATH=/opencv/opencv_contrib/modules \
 -D PYTHON_EXECUTABLE=/usr/local/bin/python \
 -D BUILD_EXAMPLES=ON .. \
    && make -j$(nproc) && make install && ldconfig

RUN export PYTHONPATH=/usr/local/opencv/2.4.9/:$PYTHONPATH

ENV WORKSPACE /catkin_ws

RUN mkdir -p $WORKSPACE/src

RUN mkdir /root/.ssh && chmod 0700 /root/.ssh &&\
	ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts
	
RUN git clone https://github.com/catchorg/Catch2.git &&\
    cd Catch2 &&\
    cmake -Bbuild -H. -DBUILD_TESTING=OFF &&\
    sudo cmake --build build/ --target install 

# # Build Pangolin
RUN cd ~ &&\
	git clone https://github.com/stevenlovegrove/Pangolin.git &&\
	cd Pangolin &&\
	mkdir build && cd build &&\
	cmake .. &&\
	make &&\
	sudo make install &&\
	ldconfig

RUN apt-get update && apt-get -y upgrade && apt-get dist-upgrade &&\
	apt-get install -y libssl-dev libusb-1.0-0-dev libudev-dev pkg-config libgtk-3-dev &&\
	apt-get install -y git wget cmake build-essential &&\
	apt-get install -y libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev at &&\
	git clone https://github.com/IntelRealSense/librealsense.git

RUN mkdir -p  $WORKSPACE/build &&\
	cd $WORKSPACE/src &&\
	git clone https://github.com/thien94/orb_slam3_ros.git &&\
	git clone https://github.com/ros-perception/vision_opencv.git -b noetic &&\
	cd ../

RUN apt install -y ros-noetic-hector-mapping ros-noetic-hector-trajectory-server

RUN mkdir -p $WORKSPACE/src && \
	cd $WORKSPACE && \
	catkin init && \
	catkin config --extend /opt/ros/noetic && \
	catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release &&\
	catkin build

ENTRYPOINT cd $WORKSPACE &&\
	/bin/bash

